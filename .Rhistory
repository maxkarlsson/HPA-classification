cluster_cols = T,
cluster_rows = F,
fontsize_row = 10,
fontsize_col = 10,
clustering_method = 'ward.D2',
show_colnames = F,
annotation_colors = list(celltype = c(content_colors, tissue.colors)),
annotation_legend = F,
annotation_row = pheat_meta,
treeheight_col = 80,
treeheight_row = 80,
border_color = NA,
gaps_row = 0,
gaps_col = 0,
legend_breaks = legend_breaks,
legend_labels = legend_labels,
color = heatmap_palette,
filename = paste(outpath, "Fig tissue enriched expression heatmap.pdf",sep='/'),
width=10, height=5)
}
dev.off()
pheat_data %>% {
pheatmap::pheatmap(.,
cluster_cols = T,
cluster_rows = F,
fontsize_row = 10,
fontsize_col = 10,
clustering_method = 'ward.D2',
show_colnames = F,
annotation_colors = list(celltype = c(content_colors, tissue.colors)),
annotation_legend = F,
annotation_row = pheat_meta,
treeheight_col = 80,
treeheight_row = 80,
border_color = NA,
gaps_row = 0,
gaps_col = 0,
legend_breaks = legend_breaks,
legend_labels = legend_labels,
color = heatmap_palette)}#,
pheatmap::pheatmap(.,
cluster_cols = T,
cluster_rows = F,
fontsize_row = 10,
fontsize_col = 10,
clustering_method = 'ward.D2',
show_colnames = F,
annotation_colors = list(celltype = c(content_colors, tissue.colors)),
annotation_legend = F,
annotation_row = pheat_meta,
treeheight_col = 80,
treeheight_row = 80,
border_color = NA,
legend_breaks = legend_breaks,
legend_labels = legend_labels,
color = heatmap_palette,
filename = paste(outpath, "Fig tissue enriched expression heatmap.png",sep='/'),
width=10, height=5)
pheat_data %>% {
pheatmap::pheatmap(.,
cluster_cols = T,
cluster_rows = F,
fontsize_row = 10,
fontsize_col = 10,
clustering_method = 'ward.D2',
show_colnames = F,
annotation_colors = list(celltype = c(content_colors, tissue.colors)),
annotation_legend = F,
annotation_row = pheat_meta,
treeheight_col = 80,
treeheight_row = 80,
border_color = NA,
legend_breaks = legend_breaks,
legend_labels = legend_labels,
color = heatmap_palette,
filename = paste(outpath, "Fig tissue enriched expression heatmap.png",sep='/'),
width=10, height=5)
}
require(pheatmap)
pheat_data <-
atlas.max %>%
select(ensg_id,
consensus_content_column = consensus_content_column,
maxEx_column = maxEx_column) %>%
left_join(select(atlas.cat, ensg_id, elevated.category, `enriched tissues`), by = "ensg_id") %>%
filter(elevated.category == "tissue enriched") %>%
select(ensg_id,
consensus_content_column,
maxEx_column) %>%
spread(key = ensg_id, value = maxEx_column) %>%
arrange(match(consensus_content_column, plot.order)) %>%
column_to_rownames("consensus_content_column") %>%
as.matrix() %>%
{log10(. + 1)}
pheat_meta <-
tibble(celltype = rownames(pheat_data)) %>%
set_rownames(rownames(pheat_data)) %>%
as.data.frame()
legend_breaks <-
pheat_data %>%
{c(seq(0, max(.), 0.5), max(.))}
legend_labels <-
pheat_data %>%
{c(seq(0, max(.), 0.5), "log10(NX + 1)\n")}
pheat_data %>% {
pheatmap::pheatmap(.,
cluster_cols = T,
cluster_rows = F,
fontsize_row = 10,
fontsize_col = 10,
clustering_method = 'ward.D2',
show_colnames = F,
annotation_colors = list(celltype = c(content_colors, tissue.colors)),
annotation_legend = F,
annotation_row = pheat_meta,
treeheight_col = 80,
treeheight_row = 80,
border_color = NA,
legend_breaks = legend_breaks,
legend_labels = legend_labels,
color = heatmap_palette,
filename = paste(outpath, "Fig tissue enriched expression heatmap.png",sep='/'),
width=10, height=5)
}
pheat_data <-
atlas.max %>%
select(ensg_id,
consensus_content_column = consensus_content_column,
maxEx_column = maxEx_column) %>%
left_join(select(atlas.cat, ensg_id, elevated.category, `enriched tissues`), by = "ensg_id") %>%
filter(elevated.category == "group enriched") %>%
select(ensg_id,
consensus_content_column,
maxEx_column) %>%
spread(key = ensg_id, value = maxEx_column) %>%
arrange(match(consensus_content_column, plot.order)) %>%
column_to_rownames("consensus_content_column") %>%
as.matrix() %>%
{log10(. + 1)}
pheat_meta <-
tibble(celltype = rownames(pheat_data)) %>%
set_rownames(rownames(pheat_data)) %>%
as.data.frame()
legend_breaks <-
pheat_data %>%
{c(seq(0, max(.), 0.5), max(.))}
legend_labels <-
pheat_data %>%
{c(seq(0, max(.), 0.5), "log10(NX + 1)\n")}
pheat_data %>% {
pheatmap::pheatmap(.,
cluster_cols = T,
cluster_rows = F,
fontsize_row = 10,
fontsize_col = 10,
clustering_method = 'ward.D2',
show_colnames = F,
annotation_colors = list(celltype = c(content_colors, tissue.colors)),
annotation_legend = F,
annotation_row = pheat_meta,
treeheight_col = 80,
treeheight_row = 80,
border_color = NA,
legend_breaks = legend_breaks,
legend_labels = legend_labels,
color = heatmap_palette,
filename = paste(outpath, "Fig group enriched expression heatmap.png",sep='/'),
width=10, height=5)
}
pheat_data <-
atlas.max %>%
select(ensg_id,
consensus_content_column = consensus_content_column,
maxEx_column = maxEx_column) %>%
left_join(select(atlas.cat, ensg_id, elevated.category, `enriched tissues`), by = "ensg_id") %>%
filter(elevated.category == "tissue enhanced") %>%
select(ensg_id,
consensus_content_column,
maxEx_column) %>%
spread(key = ensg_id, value = maxEx_column) %>%
arrange(match(consensus_content_column, plot.order)) %>%
column_to_rownames("consensus_content_column") %>%
as.matrix() %>%
{log10(. + 1)}
pheat_meta <-
tibble(celltype = rownames(pheat_data)) %>%
set_rownames(rownames(pheat_data)) %>%
as.data.frame()
legend_breaks <-
pheat_data %>%
{c(seq(0, max(.), 0.5), max(.))}
legend_labels <-
pheat_data %>%
{c(seq(0, max(.), 0.5), "log10(NX + 1)\n")}
pheat_data %>% {
pheatmap::pheatmap(.,
cluster_cols = T,
cluster_rows = F,
fontsize_row = 10,
fontsize_col = 10,
clustering_method = 'ward.D2',
show_colnames = F,
annotation_colors = list(celltype = c(content_colors, tissue.colors)),
annotation_legend = F,
annotation_row = pheat_meta,
treeheight_col = 80,
treeheight_row = 80,
border_color = NA,
legend_breaks = legend_breaks,
legend_labels = legend_labels,
color = heatmap_palette,
filename = paste(outpath, "Fig tissue enhanced expression heatmap.png",sep='/'),
width=10, height=5)
}
pheat_data <-
atlas.max %>%
select(ensg_id,
consensus_content_column = consensus_content_column,
maxEx_column = maxEx_column) %>%
left_join(select(atlas.cat, ensg_id, elevated.category, `enriched tissues`), by = "ensg_id") %>%
filter(elevated.category == "low tissue specificity") %>%
select(ensg_id,
consensus_content_column,
maxEx_column) %>%
spread(key = ensg_id, value = maxEx_column) %>%
arrange(match(consensus_content_column, plot.order)) %>%
column_to_rownames("consensus_content_column") %>%
as.matrix() %>%
{log10(. + 1)}
pheat_meta <-
tibble(celltype = rownames(pheat_data)) %>%
set_rownames(rownames(pheat_data)) %>%
as.data.frame()
legend_breaks <-
pheat_data %>%
{c(seq(0, max(.), 0.5), max(.))}
legend_labels <-
pheat_data %>%
{c(seq(0, max(.), 0.5), "log10(NX + 1)\n")}
pheat_data %>% {
pheatmap::pheatmap(.,
cluster_cols = T,
cluster_rows = F,
fontsize_row = 10,
fontsize_col = 10,
clustering_method = 'ward.D2',
show_colnames = F,
annotation_colors = list(celltype = c(content_colors, tissue.colors)),
annotation_legend = F,
annotation_row = pheat_meta,
treeheight_col = 80,
treeheight_row = 80,
border_color = NA,
legend_breaks = legend_breaks,
legend_labels = legend_labels,
color = heatmap_palette,
filename = paste(outpath, "Fig low tissue specificity expression heatmap.png",sep='/'),
width=10, height=5)
}
pheat_data <-
atlas.max %>%
select(ensg_id,
consensus_content_column = consensus_content_column,
maxEx_column = maxEx_column) %>%
left_join(select(atlas.cat, ensg_id, elevated.category, `enriched tissues`), by = "ensg_id") %>%
filter(elevated.category == "not detected") %>%
select(ensg_id,
consensus_content_column,
maxEx_column) %>%
spread(key = ensg_id, value = maxEx_column) %>%
arrange(match(consensus_content_column, plot.order)) %>%
column_to_rownames("consensus_content_column") %>%
as.matrix() %>%
{log10(. + 1)}
pheat_meta <-
tibble(celltype = rownames(pheat_data)) %>%
set_rownames(rownames(pheat_data)) %>%
as.data.frame()
legend_breaks <-
pheat_data %>%
{c(seq(0, max(.), 0.5), max(.))}
legend_labels <-
pheat_data %>%
{c(seq(0, max(.), 0.5), "log10(NX + 1)\n")}
pheat_data %>% {
pheatmap::pheatmap(.,
cluster_cols = T,
cluster_rows = F,
fontsize_row = 10,
fontsize_col = 10,
clustering_method = 'ward.D2',
show_colnames = F,
annotation_colors = list(celltype = c(content_colors, tissue.colors)),
annotation_legend = F,
annotation_row = pheat_meta,
treeheight_col = 80,
treeheight_row = 80,
border_color = NA,
legend_breaks = legend_breaks,
legend_labels = legend_labels,
color = heatmap_palette,
filename = paste(outpath, "Fig not detected expression heatmap.png",sep='/'),
width=10, height=5)
}
plot_data <-
all.atlas.max %>%
select(ensg_id,
consensus_content_column = consensus_content_column,
Ex_column = Ex_column,
maxEx_column = maxEx_column) %>%
filter(consensus_content_column != "blood") %>%
group_by(consensus_content_column) %>%
summarise(pTPM = length(which(Ex_column >= 1)),
NX = length(which(maxEx_column >= 1)),
total_genes = length(ensg_id))
all.atlas.max
atlas.max
atlas.max %>% group_by(consensus_content_name) %>%
summarise(NX = length(which(nx >= 1)),
total_genes = length(ensg_id))
atlas.max %>% group_by(consensus_content_name) %>%
summarise(NX = length(which(nx >= 1)))
atlas.max %>% group_by(consensus_content_name) %>%
summarise(`Number of detected genes` = length(which(nx >= 1)))
atlas.max %>% group_by(A = consensus_content_name) %>%
summarise(`Number of detected genes` = length(which(nx >= 1)))
atlas.max %>% group_by(Cell type = consensus_content_name) %>%
summarise(`Number of detected genes` = length(which(nx >= 1)))
atlas.max %>% group_by(`Cell type` = consensus_content_name) %>%
summarise(`Number of detected genes` = length(which(nx >= 1)))
atlas.max %>% group_by(`Cell type` = consensus_content_name) %>%
summarise(`Number of detected genes` = length(which(nx >= 1))) %>% write_csv(paste(outpath, "number genes detected celltype.pdf", sep = "/"))
atlas.max %>% group_by(`Cell type` = consensus_content_name) %>%
summarise(`Number of detected genes` = length(which(nx >= 1))) %>% write_csv(paste(outpath, "number genes detected celltype.csv", sep = "/"))
?pcaMethods
pcaMethods::listPcaMethods()
filter(., filt) %>%
mutate(ensg_id = names[filt])} %>%
column_to_rownames("ensg_id") %>%
as.matrix() %>%
`+`(1) %>%
log10() %>%
t() %>%
pcaMethods::pca(center = T, nPcs = 2, method = "nipals")
PCA.scores <-
pcaMethods::scores(pca) %>%
as.tibble(rownames = "content")
PCA.loadings <-
pcaMethods::loadings(pca) %>%
as.tibble(rownames = "ensg_id") %>%
left_join(ensemblanno.table,
by = "ensg_id")
grid.arrange(ggplot(PCA.loadings, aes(PC1, PC2, label = gene_name)) +
geom_text() +
plot_theme +
theme(aspect.ratio = 1)+
ggtitle("Loadings"),
ggplot(PCA.scores, aes(PC1, PC2, color = content, label = content)) +
geom_point(show.legend = F)+
geom_text_repel(show.legend = F)+
plot_theme +
theme(aspect.ratio = 1) +
scale_color_manual(values = content_colors)+
ggtitle("Scores"),
ncol = 2)
pca <-
atlas.max.wide %>%
#filter row with NA
{names <- rownames(.);
filt <- !apply(., 1, function(x){any(is.na(x))});
filter(., filt) %>%
mutate(ensg_id = names[filt])} %>%
column_to_rownames("ensg_id") %>%
as.matrix() %>%
`+`(1) %>%
log10() %>%
t() %>%
pcaMethods::pca(center = T, nPcs = 2, method = "nipals")
PCA.scores <-
pcaMethods::scores(pca) %>%
as.tibble(rownames = "content")
PCA.loadings <-
pcaMethods::loadings(pca) %>%
as.tibble(rownames = "ensg_id") %>%
left_join(ensemblanno.table,
by = "ensg_id")
grid.arrange(ggplot(PCA.loadings, aes(PC1, PC2, label = gene_name)) +
geom_text() +
plot_theme +
theme(aspect.ratio = 1)+
ggtitle("Loadings"),
ggplot(PCA.scores, aes(PC1, PC2, color = content, label = content)) +
geom_point(show.legend = F)+
geom_text_repel(show.legend = F)+
plot_theme +
theme(aspect.ratio = 1) +
scale_color_manual(values = content_colors)+
ggtitle("Scores"),
ncol = 2)
dev.off()
grid.arrange(ggplot(PCA.loadings, aes(PC1, PC2, label = gene_name)) +
geom_text() +
plot_theme +
theme(aspect.ratio = 1)+
ggtitle("Loadings"),
ggplot(PCA.scores, aes(PC1, PC2, color = content, label = content)) +
geom_point(show.legend = F)+
geom_text_repel(show.legend = F)+
plot_theme +
theme(aspect.ratio = 1) +
scale_color_manual(values = content_colors)+
ggtitle("Scores"),
ncol = 2)
filter(., filt) %>%
mutate(ensg_id = names[filt])} %>%
column_to_rownames("ensg_id") %>%
as.matrix() %>%
`+`(1) %>%
log10() %>%
t() %>%
pcaMethods::pca(center = T, nPcs = 2, method = "robustPca")
pca <-
atlas.max.wide %>%
#filter row with NA
{names <- rownames(.);
filt <- !apply(., 1, function(x){any(is.na(x))});
filter(., filt) %>%
mutate(ensg_id = names[filt])} %>%
column_to_rownames("ensg_id") %>%
as.matrix() %>%
`+`(1) %>%
log10() %>%
t() %>%
pcaMethods::pca(center = T, nPcs = 2, method = "robustPca")
PCA.scores <-
pcaMethods::scores(pca) %>%
as.tibble(rownames = "content")
PCA.loadings <-
pcaMethods::loadings(pca) %>%
as.tibble(rownames = "ensg_id") %>%
left_join(ensemblanno.table,
by = "ensg_id")
pca <-
atlas.max.wide %>%
#filter row with NA
{names <- rownames(.);
filt <- !apply(., 1, function(x){any(is.na(x))});
filter(., filt) %>%
mutate(ensg_id = names[filt])} %>%
column_to_rownames("ensg_id") %>%
as.matrix() %>%
`+`(1) %>%
log10() %>%
t() %>%
pcaMethods::pca(center = T, nPcs = 2, method = "nipals")
PCA.scores <-
pcaMethods::scores(pca) %>%
as.tibble(rownames = "content")
PCA.loadings <-
pcaMethods::loadings(pca) %>%
as.tibble(rownames = "ensg_id") %>%
left_join(ensemblanno.table,
by = "ensg_id")
grid.arrange(ggplot(PCA.loadings, aes(PC1, PC2, label = gene_name)) +
geom_text() +
plot_theme +
theme(aspect.ratio = 1)+
ggtitle("Loadings"),
ggplot(PCA.scores, aes(PC1, PC2, color = content, label = content)) +
geom_point(show.legend = F)+
geom_text_repel(show.legend = F)+
plot_theme +
theme(aspect.ratio = 1) +
scale_color_manual(values = content_colors)+
ggtitle("Scores"),
ncol = 2)
pca <-
atlas.max.wide %>%
#filter row with NA
{names <- rownames(.);
filt <- !apply(., 1, function(x){any(is.na(x))});
filter(., filt) %>%
mutate(ensg_id = names[filt])} %>%
column_to_rownames("ensg_id") %>%
as.matrix() %>%
`+`(1) %>%
log10() %>%
t() %>%
pcaMethods::pca(center = T, nPcs = 2, method = "bpca")
PCA.scores <-
pcaMethods::scores(pca) %>%
as.tibble(rownames = "content")
PCA.loadings <-
pcaMethods::loadings(pca) %>%
as.tibble(rownames = "ensg_id") %>%
left_join(ensemblanno.table,
by = "ensg_id")
grid.arrange(ggplot(PCA.loadings, aes(PC1, PC2, label = gene_name)) +
geom_text() +
plot_theme +
theme(aspect.ratio = 1)+
ggtitle("Loadings"),
ggplot(PCA.scores, aes(PC1, PC2, color = content, label = content)) +
geom_point(show.legend = F)+
geom_text_repel(show.legend = F)+
plot_theme +
theme(aspect.ratio = 1) +
scale_color_manual(values = content_colors)+
ggtitle("Scores"),
ncol = 2)
?pcaMethods::pca()
?umap
